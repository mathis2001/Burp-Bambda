// Define vulnerable parameter group record
record VulnParamGroup(String title, HighlightColor color, String... parameterNames) {}

// Vulnerable Parameter Groups
VulnParamGroup ssrf = new VulnParamGroup("SSRF", HighlightColor.YELLOW, "dest", "redirect", "uri", "path", "continue", "url", "window", "next", "data", "reference", "site", "html", "val", "validate", "domain", "callback", "return", "page", "feed", "host", "port", "to", "out", "view", "dir");
VulnParamGroup sql = new VulnParamGroup("SQL", HighlightColor.RED, "id", "page", "report", "dir", "search", "category", "file", "class", "url", "news", "item", "menu", "lang", "name", "ref", "title", "view", "topic", "thread", "type", "date", "form", "main", "nav", "region");
VulnParamGroup xss = new VulnParamGroup("XSS", HighlightColor.BLUE, "q", "s", "search", "id", "lang", "keyword", "query", "page", "keywords", "year", "view", "email", "type", "name", "p", "month", "image", "list_type", "url", "terms", "categoryid", "key", "l", "begindate", "enddate");
VulnParamGroup lfi = new VulnParamGroup("LFI", HighlightColor.ORANGE, "cat", "dir", "action", "board", "date", "detail", "file", "download", "path", "folder", "prefix", "include", "page", "inc", "locate", "show", "doc", "site", "type", "view", "content", "document", "layout", "mod", "conf");
VulnParamGroup or = new VulnParamGroup("OR", HighlightColor.GREEN, "next", "url", "target", "rurl", "dest", "destination", "redir", "redirect_uri", "redirect_url", "redirect", "out", "view", "to", "image_url", "go", "return", "returnTo", "return_to", "checkout_url", "continue", "return_path");
VulnParamGroup rce = new VulnParamGroup("RCE", HighlightColor.NONE, "cmd", "exec", "command", "execute", "ping", "query", "jump", "code", "reg", "do", "func", "arg", "option", "load", "process", "step", "read", "feature", "exe", "module", "payload", "run", "print");

// Toggle for highlighting
boolean highlightEnabled = true;

// Set multi vulnerable parameter group colour
HighlightColor multipleVulnColor = HighlightColor.MAGENTA;
VulnParamGroup[] groups = {ssrf, sql, xss, lfi, or, rce};
Set<String> foundParams = new HashSet<>();
Map<HighlightColor, Integer> colorCounts = new HashMap<>();
String combinedNotes = "";

// Get the request object
var request = requestResponse.request();

if (requestResponse.request().isInScope() == true){
// Main loop to check for matches
	for (VulnParamGroup group : groups) {
    	for (String paramName : group.parameterNames()) {
        	if (request.hasParameter(paramName, HttpParameterType.URL) ||
            	request.hasParameter(paramName, HttpParameterType.BODY)) {
            	if (highlightEnabled) {
                	foundParams.add(group.title() + ": " + paramName);
                	colorCounts.put(group.color(), colorCounts.getOrDefault(group.color(), 0) + 1);
            	}
            // Return if only one vulnerability class applies
            	if (!highlightEnabled) {
                	requestResponse.annotations().setHighlightColor(group.color());
                	return true;
            	}
        	}
    	}
	}


// If more than one vulnerability class applies set the multi vulnerable parameter colour
	if (!foundParams.isEmpty()) {
    	HighlightColor highlightColor = multipleVulnColor;
    	if (colorCounts.size() == 1) {
       		highlightColor = colorCounts.keySet().iterator().next();
    	}

    	requestResponse.annotations().setHighlightColor(highlightColor);
    	combinedNotes = String.join(", ", foundParams);
    	requestResponse.annotations().setNotes(combinedNotes);
    	return true;
	}
}
return false;
